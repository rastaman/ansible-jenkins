#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = """
module: jenkins_job
short_decription: create jobs in a Jenkins instance
description:
  - Create jobs in a Jenkins instance

options:
  uri:
    required: true
    description:
      - Base URI for the Jenkins instance

  operation:
    required: true
    choices: [ create, delete, enable, disable ]
    description:
      - Operation to perform

  username:
    required: true
    description:
      - The username to log-in with.

  password:
    required: true
    description:
      - The password to log-in with.

  name:
    required: true
    description:
      - Job name

  config:
   description:
     - Configuration in XML format
"""

EXAMPLES = """
# Create new job
- name: Create new job
  jenkins_job: uri={{jenkins_uri}} username={{user}} password={{password}}
           name={{job_name}}

# Delete an existing job
- name: Delete a job
  jenkins_job: uri={{jenkins_uri}} username={{username}} password={{password}}
             name="test_{{branch}}" operation=delete
"""

HAS_JENKINS_API = True
try:
    import jenkinsapi
    import jenkinsapi.jenkins
except ImportError:
    HAS_JENKINS_API = False

EMPTY_JOB_CONFIG = """
<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties />
  <scm class='hudson.scm.NullSCM'/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders/>
  <publishers/>
  <buildWrappers/>
</project>
"""


class CsrftokenRequester(jenkinsapi.jenkins.Requester):
    NO_VALID_CRUMB = 'No valid crumb was included'
    CRUMB_API = 'crumbIssuer/api/json'

    def post_url(self, url, params=None, data=None, headers=None):
        if hasattr(self, 'crumbs') and self.crumbs:
            headers[self.crumbs['crumbRequestField']] = self.crumbs['crumb']
        response = jenkinsapi.jenkins.Requester.post_url(self, url, params, data, headers)
        if response.status_code == 403 and CsrftokenRequester.NO_VALID_CRUMB in response.text:
            base_url = response.request.url.rstrip(response.request.path_url).rstrip('/')
            crumb_response = self.get_url(base_url + '/' + CsrftokenRequester.CRUMB_API)
            if crumb_response.status_code == 200:
                self.crumbs = crumb_response.json()
            headers[self.crumbs['crumbRequestField']] = self.crumbs['crumb']
            response = jenkinsapi.jenkins.Requester.post_url(self, url, params, data, headers)

        return response


def _jenkins(uri, username, password):
    return jenkinsapi.jenkins.Jenkins(uri,
                                      username=username,
                                      password=password)
    # requester=CsrftokenRequester())


def _clean_xml_str(data):
    # return data.replace('"', "&quot;")
    return data


def create(uri, user, password, name, config=EMPTY_JOB_CONFIG):
    jenkins = _jenkins(uri, user, password)
    if name in jenkins.jobs:
        return False, "Failed to create job '%s' - already exists." % name
    jenkins.create_job(name, _clean_xml_str(config))
    if name not in jenkins:
        return False, "Failed to create job '%s'." % name
    return True, None


def delete(uri, user, password, name, config):
    j = _jenkins(uri, user, password)
    if name not in j:
        return False, "Could not delete '%s' - unknown job." % name
    j.delete_job(name)
    return True, None


def enable(uri, user, password, name, config):
    j = _jenkins(uri, user, password)
    if name not in j:
        return False, "Could not enable '%s' - unknown job." % name
    job = j[name]
    if job.is_enabled():
        return False, "Job already enabled"
    else:
        job.enable()
        return True, None


def disable(uri, user, password, name, config):
    j = _jenkins(uri, user, password)
    if name not in j:
        return False, "Could not disable '%s' - unknown job." % name
    job = j[name]
    if job.is_enabled():
        job.disable()
        return True, None
    else:
        return False, "Job already disabled"


def modify(uri, user, pasword, name, config):
    j = _jenkins(uri, user, pasword)
    if name not in j:
        return False, "Could not modify '%s' - unknown job." % name
    job = j[name]
    job.update_config(_clean_xml_str(config))
    return True, None


def main():
    module = AnsibleModule(
        argument_spec=dict(
            uri=dict(required=True),
            operation=dict(default='create', choices=['create', 'delete', 'enable', 'disable', 'modify']),
            username=dict(required=True),
            password=dict(required=True),
            name=dict(required=True),
            config=dict(required=False, default=EMPTY_JOB_CONFIG),
            config_params=dict(required=False, type='dict', default={})
        ),
        supports_check_mode=False
    )

    if not HAS_JENKINS_API:
        module.fail_json(msg="Could not import python modules: jenkinsapi. Please install jenkinsapi package.")

    uri = module.params['uri']
    username = module.params['username']
    password = module.params['password']
    name = module.params['name']
    config_params = module.params['config_params']
    config = module.params['config']

    config_str = template.template_from_file(None, config, config_params)
    try:
        op = module.params['operation']
        thismodule = sys.modules[__name__]
        method = getattr(thismodule, op)
        changed, msg = method(uri, username, password, name, config_str)
        args = {'changed': changed}
        if msg:
            args['msg'] = msg
        module.exit_json(**args)
    except Exception as ex:
        return module.fail_json(msg=ex.message)


from ansible.module_utils.basic import *
from ansible.utils import template

main()